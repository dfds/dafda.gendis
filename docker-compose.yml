version: "3.8"

services:
  database:
    image: postgres:12
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=p
    volumes:
      - ./db/migrations/add-outbox-table.sql:/docker-entrypoint-initdb.d/outbox_table.sql
    healthcheck:
      test: "pg_isready -h localhost -p 5432 -U postgres"
      interval: 2s
      timeout: 5s
      retries: 5
      start_period: 30s
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092 
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: "cub kafka-ready -b localhost:9092 1 2"
      interval: 2s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka-setup:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      kafka:
        condition: service_healthy
    command: "kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic hello"
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    healthcheck:
      test: "wget --spider -q http://localhost:9090"
      interval: 2s
      timeout: 5s
      retries: 5
      start_period: 30s

  grafana:
    image: grafana/grafana
    ports:
      - 9091:3000
    depends_on:
      prometheus:
        condition: service_healthy
    volumes:
      - ./monitoring/grafana-datasource.yml:/etc/grafana/provisioning/datasources/source.yml

  # app:
  #   image: dafda.gendis
  #   ports:
  #     - 5225:5225
  #   depends_on:
  #     database:
  #       condition: service_healthy
  #     kafka-setup:
  #       condition: service_completed_successfully

  #   environment:
  #     - DB_CONNECTION_STRING=User ID=postgres;Password=p;Host=database;Port=5432;Database=postgres;
  #     - DAFDA_OUTBOX_NOTIFICATION_CHANNEL=dafda_outbox
  #     - GENDIS_PREFIX_FOR_KAFKA=GENDIS_KAFKA_
  #     - GENDIS_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
